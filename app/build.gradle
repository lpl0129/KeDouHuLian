apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'
def map = rootProject.ext.resmap
android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion
    defaultConfig {
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        javaCompileOptions {
            annotationProcessorOptions { includeCompileClasspath = true }
            testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        }
        signingConfigs {
            config {
                keyAlias 'qttx'
                keyPassword 'qttxkeji'
                storeFile file('qttx.jks')
                storePassword 'qttxkeji'
            }
        }
        buildTypes {
            release {
                //多dex
                multiDexEnabled true
                //Zipalign优化
                zipAlignEnabled true
                // 移除无用的resource文件
                shrinkResources true
                minifyEnabled true
                signingConfig signingConfigs.config
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                ndk {
                    abiFilters "armeabi-v7a"
                }
            }
            debug {
                shrinkResources false
                minifyEnabled false//混淆
                multiDexEnabled true
                ndk {
                    abiFilters "armeabi-v7a", "x86"
                }
                signingConfig signingConfigs.config
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            }
        }
        flavorDimensions "versionCode"
        productFlavors {
            map.each { k, v ->
                String key = k;
                if (!key.equals("test")) {
                    "$k"
                            {
                                def appId = v.get("appId")
                                def version_vode = v.get("versionCode")
                                def version_name = v.get("versionName")
                                applicationId appId
                                versionCode version_vode as int
                                versionName version_name
                                manifestPlaceholders = [
                                        JPUSH_PKGNAME: appId,
                                        JPUSH_CHANNEL: "developer-default" //暂时填写默认值即可.
                                ]
                                v.each { keyitem, valueitem ->
                                    String keyString = keyitem;
                                    if (keyString.startsWith("colors.")) {
                                        def truekey = keyString.replace('colors.', '')
                                        resValue 'color', truekey, valueitem
                                    } else if (keyString.startsWith("strings.")) {
                                        def truekey = keyString.replace('strings.', '')
                                        resValue 'string', truekey, valueitem
                                    } else if (keyString.startsWith("dimens.")) {
                                        def truekey = keyString.replace('dimens.', '')
                                        resValue 'dimen', truekey, valueitem
                                    }else if (keyString.startsWith("manifest.")) {
                                        def truekey = keyString.replace('manifest.', '')
                                        manifestPlaceholders[truekey] = valueitem
                                    } else if (keyString.startsWith('buildConfig.')) {
                                        def truekey = keyString.replace('buildConfig.', '')
                                        buildConfigField 'String', truekey, '"' + valueitem + '"'
                                    }
                                }
                            }
                }
            }
        }
        sourceSets {
            main {
                manifest.srcFile 'src/main/AndroidManifest.xml'
                java.srcDirs = ['src/main/java']
                resources.srcDirs = ['src/main/java']
                aidl.srcDirs = ['src/main/java']
                renderscript.srcDirs = ['src/main/java']
                res.srcDirs = ['src/main/res']
                assets.srcDirs = ['src/main/assets']
                jniLibs.srcDirs = ['src/main/jniLibs']

            }

            map.each { k, v ->
                String key = k;
                if (!key.equals("test")) {
                    def resPath = v.get("resPath")
                    if (!"".equals(resPath)) {
                        "$k"
                                {
                                    res.srcDirs = ['src/' + resPath + '/res']
                                }
                    }
                }
            }

        }

        //过滤掉不支持的平台
        packagingOptions {
//        exclude "lib/armeabi-v7a/librealm-jni.so"
            exclude "lib/arm64-v8a/librealm-jni.so"
            exclude "lib/mips/librealm-jni.so"
            exclude "lib/x86/librealm-jni.so"
            exclude "lib/x86_64/librealm-jni.so"
        }
        aaptOptions {
            cruncherEnabled true
        }
        sourceSets {
            main.res.srcDirs += 'src/main/res-user'
        }
//    def resmap = [free: ":basea"]
//
//    resmap['nofree'] = ':baseb'
//
//    flavorDimensions "versionCode"
//    productFlavors {
//        resmap.each { k, v ->
//            def key = k+'Implementation'
//            "$k"
//                    {
//                        dependencies
//                                {
//                                    "$key" project(v)
//                                }
//                    }
//        }
//    }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    productFlavors {
    }
}
repositories {
    flatDir {
        dirs 'libs'
    }
}
androidExtensions {
    experimental = true
}
allprojects {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            url "http://dl.bintray.com/piasy/maven"
        }
        maven { url "https://dl.bintray.com/thelasterstar/maven/" }

    }
}
dependencies {
    implementation files('libs/open_sdk_r5990_lite.jar')
    implementation 'com.sina.weibo.sdk:core:4.2.7:openDefaultRelease@aar'
    implementation 'com.tencent.mm.opensdk:wechat-sdk-android-without-mta:+'
    implementation 'com.android.support:multidex:1.0.3'
    api project(':basiclib')

    implementation project(':IMKit')

    implementation 'me.jessyan:autosize:0.9.5'

    implementation 'cn.jiguang.sdk:jpush:3.1.5'
    // 此处以JPush 3.1.5 版本为例。
    implementation 'cn.jiguang.sdk:jcore:1.2.3'
    // 此处以JCore 1.2.3 版本为例。
    implementation files('libs/alipaySdk-20180601.jar')
    implementation 'com.qiniu:qiniu-android-sdk:7.3.10'
    implementation "android.arch.persistence.room:runtime:1.1.1"
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'android.arch.lifecycle:extensions:1.1.1'
    annotationProcessor "android.arch.persistence.room:compiler:1.1.1"

    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.6.3'
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.6.3'
    // Optional, if you use support library fragments:
    debugImplementation 'com.squareup.leakcanary:leakcanary-support-fragment:1.6.3'

    implementation 'com.github.hackware1993:MagicIndicator:1.5.0'

    implementation 'cn.jzvd:jiaozivideoplayer:7.0.4'
    implementation "me.leolin:ShortcutBadger:1.1.22@aar"
    api project(':contactcard')
}
